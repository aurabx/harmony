# Task List for Router Implementation and Improvement

This document outlines the tasks required for the router's implementation, testing, and alignment with project standards. Tasks are informed by the guidelines in `.junie/guidelines.md` and the expected behavior described in `docs/router.md`.

---

## General Improvements
1. **Implement Full DICOM Proxying (Priority)**:
   - Complete the `ProxyState::Dicom` implementation to handle DICOM-specific proxying.
   - Integrate with backend configurations (`ip`, `port`, `aet`) defined in `select_backend_for_endpoint`.

2. **Dynamic Route Handling**:
   - Ensure the router dynamically configures endpoints and backends based on the `network_name` passed to `build_network_router`.
   - Dynamically validate configurations against `network_name` and log meaningful errors for invalid setups.

3. **Error Handling Enhancements**:
   - Replace current logging-only errors in endpoint/backend config validation with appropriate HTTP error responses (`BAD_REQUEST`, `NOT_FOUND`, etc.).
   - Improve error messaging for missing or misconfigured middleware/backends.

4. **Middleware Expansion**:
   - Enhance middleware integration and ensure `incoming` and `outgoing` middleware are applied strictly in the order described in `docs/router.md`.

5. **Ensure endpoints are selected based on path**

---

## Testing
1. **Add Integration Tests for New Features**:
   - Test DICOM proxying (`ProxyState::Dicom`) once implemented.
   - Validate middleware chaining for incoming and outgoing requests.
   - Ensure proper backend selection logic (`select_backend_for_endpoint`) under various configurations.

2. **Expand Existing Test Scenarios**:
   - Cover edge cases like multiple backends failing to resolve, and middleware misconfigurations.
   - Verify dynamic route generation for networks of varying complexity (e.g., different group and endpoint combinations).

3. **Automate Config Validation Tests**:
   - Ensure configuration TOML files (e.g., in `examples/`) align with the validation rules.
   - Write automated tests to confirm out-of-the-box compatibility for example configs (e.g., `test-config.toml`).

4. **Add Mock Services for Backend Testing**:
   - Create mock external services to validate router behavior under different backend types (e.g., FHIR, DICOM).

---

## Documentation
1. **Extend Router Documentation**:
   - Update `docs/router.md` to include instructions for configuring middleware chains and managing DICOM backends.
   - Document the dynamic behavior of `build_network_router` with examples of network-bound routing.

2. **Provide Error and Debug Guidelines**:
   - Add a section describing common router errors and debugging scenarios (e.g., middleware misconfiguration, backend failures).
   - Include suggestions for setting up appropriate logging and tracing.

---

## Validation Pipeline Enhancements
1. **Extend Middleware Validation**:
   - Update `validate_middleware_references` to support new middleware types.
   - Add integration tests for middleware-specific errors and missing configurations.

2. **Backend and Endpoint Validation**:
   - Add stricter checks for DICOM-specific configurations in endpoints and backends.

---

## Developer Tooling
1. **Improve Local Testing Workflow**:
   - Provide pre-configured scripts or commands (e.g., for `cargo run` with test configs).
   - Ensure robust logging for local test runs (e.g., `RUST_LOG=harmony=debug`).

2. **Continuous Integration**:
   - Set up CI checks for formatting (`cargo fmt`), linting (`cargo clippy`), and testing under multiple configurations.
   - Add test scenarios for network-specific behaviors.

---

## Housekeeping
1. **Keep Example Configurations Updated**:
   - Ensure all example configurations (e.g., `incoming.toml`, `outgoing.toml`, `test-config.toml`) include valid data for groups, backends, and middleware.
   - Validate that running the service with these configurations works without errors.

2. **Code Cleanup**:
   - Refactor redundant or unused code from the router module.
   - Consolidate middleware and proxying logic if shared patterns emerge across backend types.

---

By addressing these tasks, the router will achieve both functional correctness and adherence to the projectâ€™s defined guidelines.