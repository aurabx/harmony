name: Release Harmony

on:
  push:
    tags:
      - 'v*'          # production releases
  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-binaries:
    name: Build Rust binaries (cross/native)
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-musl
          - os: ubuntu-latest
            target: aarch64-unknown-linux-musl
          - os: windows-latest
            target: x86_64-pc-windows-msvc
          - os: macos-latest
            target: x86_64-apple-darwin
          - os: macos-latest
            target: aarch64-apple-darwin
    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      # Linux builds (use cross)
      - name: Build Harmony (Linux cross)
        if: runner.os == 'Linux'
        shell: bash
        run: |
          echo "Detected Linux runner. Installing and using cross."
          cargo install cross --git https://github.com/cross-rs/cross
          cross build --release --target ${{ matrix.target }}

      # Non-Linux builds (macOS + Windows)
      - name: Build Harmony (native)
        if: runner.os != 'Linux'
        run: |
          echo "Detected non-Linux runner. Building natively."
          cargo build --release --target ${{ matrix.target }}

      - name: Package artefacts
        shell: bash
        run: |
          mkdir -p release
          cp target/${{ matrix.target }}/release/harmony* release/ || true
          cd release
          tar czf harmony-${{ matrix.target }}.tar.gz harmony* || true
          shasum -a 256 harmony-${{ matrix.target }}.tar.gz > harmony-${{ matrix.target }}.sha256

      - name: Upload artefacts
        uses: actions/upload-artifact@v4
        with:
          name: harmony-${{ matrix.target }}
          path: release/

  docker:
    name: Build and push multi-arch Docker image
    runs-on: ubuntu-latest
    needs: build-binaries
    permissions:
      contents: read
      packages: write
      id-token: write

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Compute image tags
        id: meta
        shell: bash
        run: |
          if [ "${GITHUB_REF_TYPE}" = "tag" ]; then
            echo "Detected release tag ${GITHUB_REF_NAME}"
            echo "tags=${REGISTRY}/${IMAGE_NAME}:${GITHUB_REF_NAME},${REGISTRY}/${IMAGE_NAME}:latest" >> $GITHUB_OUTPUT
          else
            SHORT_SHA="${GITHUB_SHA::7}"
            SAFE_BRANCH="${GITHUB_REF_NAME//\//-}"
            echo "tags=${REGISTRY}/${IMAGE_NAME}:${SAFE_BRANCH}-${SHORT_SHA}" >> $GITHUB_OUTPUT
          fi
        env:
          REGISTRY: ${{ env.REGISTRY }}
          IMAGE_NAME: ${{ env.IMAGE_NAME }}

      - name: Build and push
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          platforms: linux/amd64,linux/arm64
          tags: ${{ steps.meta.outputs.tags }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  release:
    name: Publish GitHub Release
    runs-on: ubuntu-latest
    needs: [build-binaries, docker]
    if: startsWith(github.ref, 'refs/tags/v')
    steps:
      - name: Download artefacts
        uses: actions/download-artifact@v4
        with:
          path: ./artifacts

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.ref_name }}
          name: Harmony ${{ github.ref_name }}
          files: ./artifacts/**/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}